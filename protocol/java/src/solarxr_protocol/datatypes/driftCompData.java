// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Data packet containing data for each tracking reset.
 * difference_deg: list of error degrees calculated on a reset (CCW(+),C(-))
 * comp_deg: yaw degrees/s generated through drift compensation (CCW(+),C(-))
 * delta_times: a list of time (seconds) it took for the drift to develop
 * difference_quats: a list of the error quaternions calculated on a reset
 * comp_quats: yaw compensation/s quaternions generated through drift compensation
 */
@SuppressWarnings("unused")
public final class driftCompData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static driftCompData getRootAsdriftCompData(ByteBuffer _bb) { return getRootAsdriftCompData(_bb, new driftCompData()); }
  public static driftCompData getRootAsdriftCompData(ByteBuffer _bb, driftCompData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public driftCompData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean driftCompEnable() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public solarxr_protocol.datatypes.math.Quat differenceQuats(int j) { return differenceQuats(new solarxr_protocol.datatypes.math.Quat(), j); }
  public solarxr_protocol.datatypes.math.Quat differenceQuats(solarxr_protocol.datatypes.math.Quat obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 16, bb) : null; }
  public int differenceQuatsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.datatypes.math.Quat.Vector differenceQuatsVector() { return differenceQuatsVector(new solarxr_protocol.datatypes.math.Quat.Vector()); }
  public solarxr_protocol.datatypes.math.Quat.Vector differenceQuatsVector(solarxr_protocol.datatypes.math.Quat.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 16, bb) : null; }
  public solarxr_protocol.datatypes.math.Quat compensationQuats(int j) { return compensationQuats(new solarxr_protocol.datatypes.math.Quat(), j); }
  public solarxr_protocol.datatypes.math.Quat compensationQuats(solarxr_protocol.datatypes.math.Quat obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o) + j * 16, bb) : null; }
  public int compensationQuatsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.datatypes.math.Quat.Vector compensationQuatsVector() { return compensationQuatsVector(new solarxr_protocol.datatypes.math.Quat.Vector()); }
  public solarxr_protocol.datatypes.math.Quat.Vector compensationQuatsVector(solarxr_protocol.datatypes.math.Quat.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 16, bb) : null; }
  public float differenceDeg(int j) { int o = __offset(10); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int differenceDegLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector differenceDegVector() { return differenceDegVector(new FloatVector()); }
  public FloatVector differenceDegVector(FloatVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer differenceDegAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer differenceDegInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  public float compensationDeg(int j) { int o = __offset(12); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int compensationDegLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector compensationDegVector() { return compensationDegVector(new FloatVector()); }
  public FloatVector compensationDegVector(FloatVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer compensationDegAsByteBuffer() { return __vector_as_bytebuffer(12, 4); }
  public ByteBuffer compensationDegInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 4); }
  public float resetInterval(int j) { int o = __offset(14); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int resetIntervalLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector resetIntervalVector() { return resetIntervalVector(new FloatVector()); }
  public FloatVector resetIntervalVector(FloatVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer resetIntervalAsByteBuffer() { return __vector_as_bytebuffer(14, 4); }
  public ByteBuffer resetIntervalInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 4); }
  public int maxResets() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createdriftCompData(FlatBufferBuilder builder,
      boolean driftCompEnable,
      int differenceQuatsOffset,
      int compensationQuatsOffset,
      int differenceDegOffset,
      int compensationDegOffset,
      int resetIntervalOffset,
      int maxResets) {
    builder.startTable(7);
    driftCompData.addResetInterval(builder, resetIntervalOffset);
    driftCompData.addCompensationDeg(builder, compensationDegOffset);
    driftCompData.addDifferenceDeg(builder, differenceDegOffset);
    driftCompData.addCompensationQuats(builder, compensationQuatsOffset);
    driftCompData.addDifferenceQuats(builder, differenceQuatsOffset);
    driftCompData.addMaxResets(builder, maxResets);
    driftCompData.addDriftCompEnable(builder, driftCompEnable);
    return driftCompData.enddriftCompData(builder);
  }

  public static void startdriftCompData(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addDriftCompEnable(FlatBufferBuilder builder, boolean driftCompEnable) { builder.addBoolean(0, driftCompEnable, false); }
  public static void addDifferenceQuats(FlatBufferBuilder builder, int differenceQuatsOffset) { builder.addOffset(1, differenceQuatsOffset, 0); }
  public static void startDifferenceQuatsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(16, numElems, 4); }
  public static void addCompensationQuats(FlatBufferBuilder builder, int compensationQuatsOffset) { builder.addOffset(2, compensationQuatsOffset, 0); }
  public static void startCompensationQuatsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(16, numElems, 4); }
  public static void addDifferenceDeg(FlatBufferBuilder builder, int differenceDegOffset) { builder.addOffset(3, differenceDegOffset, 0); }
  public static int createDifferenceDegVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startDifferenceDegVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCompensationDeg(FlatBufferBuilder builder, int compensationDegOffset) { builder.addOffset(4, compensationDegOffset, 0); }
  public static int createCompensationDegVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startCompensationDegVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addResetInterval(FlatBufferBuilder builder, int resetIntervalOffset) { builder.addOffset(5, resetIntervalOffset, 0); }
  public static int createResetIntervalVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startResetIntervalVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMaxResets(FlatBufferBuilder builder, int maxResets) { builder.addByte(6, (byte) maxResets, (byte) 0); }
  public static int enddriftCompData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public driftCompData get(int j) { return get(new driftCompData(), j); }
    public driftCompData get(driftCompData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public driftCompDataT unpack() {
    driftCompDataT _o = new driftCompDataT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(driftCompDataT _o) {
    boolean _oDriftCompEnable = driftCompEnable();
    _o.setDriftCompEnable(_oDriftCompEnable);
    solarxr_protocol.datatypes.math.QuatT[] _oDifferenceQuats = new solarxr_protocol.datatypes.math.QuatT[differenceQuatsLength()];
    for (int _j = 0; _j < differenceQuatsLength(); ++_j) {_oDifferenceQuats[_j] = (differenceQuats(_j) != null ? differenceQuats(_j).unpack() : null);}
    _o.setDifferenceQuats(_oDifferenceQuats);
    solarxr_protocol.datatypes.math.QuatT[] _oCompensationQuats = new solarxr_protocol.datatypes.math.QuatT[compensationQuatsLength()];
    for (int _j = 0; _j < compensationQuatsLength(); ++_j) {_oCompensationQuats[_j] = (compensationQuats(_j) != null ? compensationQuats(_j).unpack() : null);}
    _o.setCompensationQuats(_oCompensationQuats);
    float[] _oDifferenceDeg = new float[differenceDegLength()];
    for (int _j = 0; _j < differenceDegLength(); ++_j) {_oDifferenceDeg[_j] = differenceDeg(_j);}
    _o.setDifferenceDeg(_oDifferenceDeg);
    float[] _oCompensationDeg = new float[compensationDegLength()];
    for (int _j = 0; _j < compensationDegLength(); ++_j) {_oCompensationDeg[_j] = compensationDeg(_j);}
    _o.setCompensationDeg(_oCompensationDeg);
    float[] _oResetInterval = new float[resetIntervalLength()];
    for (int _j = 0; _j < resetIntervalLength(); ++_j) {_oResetInterval[_j] = resetInterval(_j);}
    _o.setResetInterval(_oResetInterval);
    int _oMaxResets = maxResets();
    _o.setMaxResets(_oMaxResets);
  }
  public static int pack(FlatBufferBuilder builder, driftCompDataT _o) {
    if (_o == null) return 0;
    int _differenceQuats = 0;
    solarxr_protocol.datatypes.math.QuatT[] _oDifferenceQuats = _o.getDifferenceQuats();
    if (_oDifferenceQuats != null) {
      int _unused_offset = 0;
      startDifferenceQuatsVector(builder, _oDifferenceQuats.length);
      for (int _j = _oDifferenceQuats.length - 1; _j >=0; _j--) { _unused_offset = solarxr_protocol.datatypes.math.Quat.pack(builder, _oDifferenceQuats[_j]);}
      _differenceQuats = builder.endVector();
    }
    int _compensationQuats = 0;
    solarxr_protocol.datatypes.math.QuatT[] _oCompensationQuats = _o.getCompensationQuats();
    if (_oCompensationQuats != null) {
      int _unused_offset = 0;
      startCompensationQuatsVector(builder, _oCompensationQuats.length);
      for (int _j = _oCompensationQuats.length - 1; _j >=0; _j--) { _unused_offset = solarxr_protocol.datatypes.math.Quat.pack(builder, _oCompensationQuats[_j]);}
      _compensationQuats = builder.endVector();
    }
    int _differenceDeg = 0;
    if (_o.getDifferenceDeg() != null) {
      _differenceDeg = createDifferenceDegVector(builder, _o.getDifferenceDeg());
    }
    int _compensationDeg = 0;
    if (_o.getCompensationDeg() != null) {
      _compensationDeg = createCompensationDegVector(builder, _o.getCompensationDeg());
    }
    int _resetInterval = 0;
    if (_o.getResetInterval() != null) {
      _resetInterval = createResetIntervalVector(builder, _o.getResetInterval());
    }
    return createdriftCompData(
      builder,
      _o.getDriftCompEnable(),
      _differenceQuats,
      _compensationQuats,
      _differenceDeg,
      _compensationDeg,
      _resetInterval,
      _o.getMaxResets());
  }
}

