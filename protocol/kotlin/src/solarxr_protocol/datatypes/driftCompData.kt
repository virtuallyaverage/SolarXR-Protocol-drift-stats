// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Data packet containing data for each tracking reset.
 * difference_deg: list of error degrees calculated on a reset (CCW(+),C(-))
 * comp_deg: yaw degrees/s generated through drift compensation (CCW(+),C(-))
 * delta_times: a list of time (seconds) it took for the drift to develop
 * difference_quats: a list of the error quaternions calculated on a reset
 * comp_quats: yaw compensation/s quaternions generated through drift compensation
 */
@Suppress("unused")
class driftCompData : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : driftCompData {
        __init(_i, _bb)
        return this
    }
    val driftCompEnable : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun differenceQuats(j: Int) : solarxr_protocol.datatypes.math.Quat? = differenceQuats(solarxr_protocol.datatypes.math.Quat(), j)
    fun differenceQuats(obj: solarxr_protocol.datatypes.math.Quat, j: Int) : solarxr_protocol.datatypes.math.Quat? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__vector(o) + j * 16, bb)
        } else {
            null
        }
    }
    val differenceQuatsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    fun compensationQuats(j: Int) : solarxr_protocol.datatypes.math.Quat? = compensationQuats(solarxr_protocol.datatypes.math.Quat(), j)
    fun compensationQuats(obj: solarxr_protocol.datatypes.math.Quat, j: Int) : solarxr_protocol.datatypes.math.Quat? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__vector(o) + j * 16, bb)
        } else {
            null
        }
    }
    val compensationQuatsLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    fun differenceDeg(j: Int) : Float {
        val o = __offset(10)
        return if (o != 0) {
            bb.getFloat(__vector(o) + j * 4)
        } else {
            0.0f
        }
    }
    val differenceDegLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    val differenceDegAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 4)
    fun differenceDegInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 4)
    fun compensationDeg(j: Int) : Float {
        val o = __offset(12)
        return if (o != 0) {
            bb.getFloat(__vector(o) + j * 4)
        } else {
            0.0f
        }
    }
    val compensationDegLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    val compensationDegAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 4)
    fun compensationDegInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 4)
    fun resetInterval(j: Int) : Float {
        val o = __offset(14)
        return if (o != 0) {
            bb.getFloat(__vector(o) + j * 4)
        } else {
            0.0f
        }
    }
    val resetIntervalLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    val resetIntervalAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 4)
    fun resetIntervalInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 4)
    val maxResets : UByte
        get() {
            val o = __offset(16)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsdriftCompData(_bb: ByteBuffer): driftCompData = getRootAsdriftCompData(_bb, driftCompData())
        @JvmStatic
        fun getRootAsdriftCompData(_bb: ByteBuffer, obj: driftCompData): driftCompData {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createdriftCompData(builder: FlatBufferBuilder, driftCompEnable: Boolean, differenceQuatsOffset: Int, compensationQuatsOffset: Int, differenceDegOffset: Int, compensationDegOffset: Int, resetIntervalOffset: Int, maxResets: UByte) : Int {
            builder.startTable(7)
            addResetInterval(builder, resetIntervalOffset)
            addCompensationDeg(builder, compensationDegOffset)
            addDifferenceDeg(builder, differenceDegOffset)
            addCompensationQuats(builder, compensationQuatsOffset)
            addDifferenceQuats(builder, differenceQuatsOffset)
            addMaxResets(builder, maxResets)
            addDriftCompEnable(builder, driftCompEnable)
            return enddriftCompData(builder)
        }
        @JvmStatic
        fun startdriftCompData(builder: FlatBufferBuilder) = builder.startTable(7)
        @JvmStatic
        fun addDriftCompEnable(builder: FlatBufferBuilder, driftCompEnable: Boolean) = builder.addBoolean(0, driftCompEnable, false)
        @JvmStatic
        fun addDifferenceQuats(builder: FlatBufferBuilder, differenceQuats: Int) = builder.addOffset(1, differenceQuats, 0)
        @JvmStatic
        fun startDifferenceQuatsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(16, numElems, 4)
        @JvmStatic
        fun addCompensationQuats(builder: FlatBufferBuilder, compensationQuats: Int) = builder.addOffset(2, compensationQuats, 0)
        @JvmStatic
        fun startCompensationQuatsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(16, numElems, 4)
        @JvmStatic
        fun addDifferenceDeg(builder: FlatBufferBuilder, differenceDeg: Int) = builder.addOffset(3, differenceDeg, 0)
        @JvmStatic
        fun createDifferenceDegVector(builder: FlatBufferBuilder, data: FloatArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addFloat(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startDifferenceDegVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun addCompensationDeg(builder: FlatBufferBuilder, compensationDeg: Int) = builder.addOffset(4, compensationDeg, 0)
        @JvmStatic
        fun createCompensationDegVector(builder: FlatBufferBuilder, data: FloatArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addFloat(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startCompensationDegVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun addResetInterval(builder: FlatBufferBuilder, resetInterval: Int) = builder.addOffset(5, resetInterval, 0)
        @JvmStatic
        fun createResetIntervalVector(builder: FlatBufferBuilder, data: FloatArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addFloat(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startResetIntervalVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun addMaxResets(builder: FlatBufferBuilder, maxResets: UByte) = builder.addByte(6, maxResets.toByte(), 0)
        @JvmStatic
        fun enddriftCompData(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
